<?php

namespace BackOffice\ActionBundle\Entity;

use Doctrine\ORM\EntityRepository;
use BackOffice\ActionBundle\Entity\Action;
use BackOffice\ParserBundle\Manager\ParserManager;

/**
 * ActionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActionRepository extends EntityRepository
{
    public function findAll()
    {
        return $this->findBy(array(), array('dtAction' => 'DESC'));
    }

    public function findAllCustom()
    {
        $query = $this
            ->createQueryBuilder('a')
            ->where('a.etat = :etatAttente')
            ->orWhere('a.etat = :etatEnCours')
            ->orWhere('a.etat = :etatKO AND a.nbEssai < '.Action::SEUIL_NB_ESSAI.' AND a.dtDernierEssai < :datejour')
            ->setParameter('etatAttente', 'attente')
            ->setParameter('etatEnCours', 'encours')
            ->setParameter('etatKO', 'KO')
            ->setParameter('datejour', new \Datetime());

        return $query->getQuery()->getResult();
    }

    public function search($datas, $sort = null)
    {
        $query = $this
            ->createQueryBuilder('a')
            ->where('a.id IS NOT NULL');

        if (isset($datas['type']) && $datas['type'] != "") {
            $query
                ->andWhere('a.type = :t')
                ->setParameter('t', $datas['type']);
        }
        if (isset($datas['module']) && $datas['module']) {
            $query
                ->andWhere('a.module LIKE :m')
                ->setParameter('m', "%" . $datas['module'] . "%");
        }
        if (isset($datas['identifiant']) && $datas['identifiant']) {
            $query
                ->andWhere('a.numCpt LIKE :i')
                ->setParameter('i', "%" . $datas['identifiant'] . "%");
        }
        if (isset($datas['dateActionDu']) && $datas['dateActionDu']) {
            $query
                ->andWhere($query->expr()->gte('a.dtAction', ':dateActionDu'))
                ->setParameter(
                    'dateActionDu',
                    ParserManager::transformDate($datas['dateActionDu']),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }
        if (isset($datas['dateActionAu']) && $datas['dateActionAu']) {
            $query
                ->andWhere($query->expr()->lte('a.dtAction', ':dateActionAu'))
                ->setParameter(
                    'dateActionAu',
                    ParserManager::transformDate($datas['dateActionAu'], false),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }
        if (isset($datas['nbEssai']) && $datas['nbEssai']) {
            $query
                ->andWhere('a.nbEssai = :ne')
                ->setParameter('ne', $datas['nbEssai']);
        }
        if (isset($datas['dateDernierEssaiDu']) && $datas['dateDernierEssaiDu']) {
            $query
                ->andWhere($query->expr()->gte('a.dtDernierEssai', ':dateDernierEssaiDu'))
                ->setParameter(
                    'dateDernierEssaiDu',
                    ParserManager::transformDate($datas['dateDernierEssaiDu']),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }
        if (isset($datas['dateDernierEssaiAu']) && $datas['dateDernierEssaiAu']) {
            $query
                ->andWhere($query->expr()->lte('a.dtDernierEssai', ':dateDernierEssaiAu'))
                ->setParameter(
                    'dateDernierEssaiAu',
                    ParserManager::transformDate($datas['dateDernierEssaiAu'], false),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }
        if (isset($datas['etat']) && $datas['etat']) {
            $query
                ->andWhere('a.etat = :e')
                ->setParameter('e', strtolower($datas['etat']));
        }

        if ($sort) {
            $arraySort = explode('-', $sort);
            $query->orderBy('a.'.$arraySort[0], $arraySort[1]);
        } else {
            $query->orderBy('a.dtAction', 'DESC');
        }

        return $query->getQuery()->getResult();
    }
}
