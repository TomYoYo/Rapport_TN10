<?php

namespace BackOffice\MonitoringBundle\Entity;

use Doctrine\ORM\EntityRepository;
use BackOffice\ParserBundle\Manager\ParserManager;
use Pagerfanta\Adapter\DoctrineORMAdapter;

/**
 * LogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogRepository extends EntityRepository
{
    public function findAll()
    {
        return $this->findBy(array(), array('datetime' => 'DESC'));
    }
    
    public function findByADatetime($date)
    {
        $query = $this
            ->createQueryBuilder('l');
        
        $query
            ->where($query->expr()->gte('l.datetime', ':dateDeb'))
            ->setParameter(
                'dateDeb',
                ParserManager::transformDate($date),
                \Doctrine\DBAL\Types\Type::DATETIME
            )
            ->andWhere($query->expr()->gte('l.datetime', ':dateFin'))
            ->setParameter(
                'dateFin',
                ParserManager::transformDate($date, false),
                \Doctrine\DBAL\Types\Type::DATETIME
            );
        
        return $query->getQuery()->getResult();
    }

    public function search($datas, $sort = null, $isAdapter = false)
    {
        $query = $this
            ->createQueryBuilder('l')
            ->where('l.id IS NOT NULL');

        if (isset($datas['niveau']) && $datas['niveau'] != "") {
            $query
                ->andWhere('l.niveau = :n')
                ->setParameter('n', $datas['niveau']);
        }
        if (isset($datas['module']) && $datas['module']) {
            $query
                ->andWhere('l.module LIKE :m')
                ->setParameter('m', "%" . $datas['module'] . "%");
        }
        if (isset($datas['action']) && $datas['action']) {
            $query
                ->andWhere('l.action LIKE :a')
                ->setParameter('a', "%" . $datas['action'] . "%");
        }
        if (isset($datas['libelle']) && $datas['libelle']) {
            $query
                ->andWhere('l.libelle LIKE :l')
                ->setParameter('l', "%" . $datas['libelle'] . "%");
        }
        if (isset($datas['dateDu']) && $datas['dateDu']) {
            $query
                ->andWhere($query->expr()->gte('l.datetime', ':dateDu'))
                ->setParameter(
                    'dateDu',
                    ParserManager::transformDate($datas['dateDu']),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }
        if (isset($datas['dateAu']) && $datas['dateAu']) {
            $query
                ->andWhere($query->expr()->lte('l.datetime', ':dateAu'))
                ->setParameter(
                    'dateAu',
                    ParserManager::transformDate($datas['dateAu'], false),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }
        if (isset($datas['utilisateur']) && $datas['utilisateur']) {
            $query
                ->leftJoin('l.utilisateur', 'p')
                ->andWhere('p.id = :u')
                ->setParameter('u', $datas['utilisateur']);
        }

        if ($sort) {
            $arraySort = explode('-', $sort);
            $query->orderBy('l.' . $arraySort[0], $arraySort[1]);
        } else {
            $query->orderBy('l.datetime', 'DESC');
        }

        if ($isAdapter) {
            return new DoctrineORMAdapter($query);
        } else {
            return $query->getQuery()->getResult();
        }
    }

    /*
    public function findAllModules()
    {
        $modules = array(
            'BackOffice'  => array(
                'Action',
                'Connexion',
                'File',
                'Monitoring',
                'Parser',
                'User'
            ),
            'Editique'    => array(
                'DAT',
                'Livret',
                'Master',
                'RIB',
                'Relevé'
            ),
            'FrontOffice' => array(
                'Main'
            ),
            'OD'          => array(
                'Module OD'
            )
        );

        return $modules;
    }

    public function findAllActions()
    {
        $actions = array(
            'Commande "Vérification des triggers"',
            'Génération de données persistantes',
            'Tests unitaires et/ou fonctionnels',
            'Connexion SFTP',
            'Upload SFTP',
            'Download SFTP',
            'Déplacement SFTP',
            'Connexion FTP',
            'Upload FTP',
            'Download FTP',
            'Lecture d\'un fichier interne',
            'Ecriture d\'un fichier interne',
            'Déplacement d\'un fichier interne',
            'Ajout de données depuis le Back-Office',
            'Modification de données depuis le Back-Office',
            'Suppression de données depuis le Back-Office',
            'Ecriture de fichier',
            'Lecture de fichier',
            'Commande "Creation d\'un nouvel utilisateur"',
            'Authentification utilisateur',
            'Reset du mot de passe',
            'Génération d\'un livret',
            'Insertion d\'un editique en base',
            'Commande de génération des RIB',
            'Lecture du XML en entrée',
            'Génération d\'un RIB',
            'Commande de génération des Relevés',
            'Lecture du fichier en entrée',
            'Génération d\'un Relevé',
            'Génération du fichier audit',
            'Génération du fichier CRE',
            'Importation du fichier PAIE Talencia'
        );
        sort($actions);

        return $actions;
    }
     *
     */
}
