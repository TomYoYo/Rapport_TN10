<?php
/**
 * Created by PhpStorm.
 * User: t.pueyo
 * Date: 28/04/2016
 * Time: 16:33
 */
namespace BackOffice\CustomerBundle\Manager;


use BackOffice\CustomerBundle\Entity\Customer;
use BackOffice\CustomerBundle\Entity\CustomerRepository;
use BackOffice\CustomerBundle\Entity\SettingsCategorie;
use BackOffice\CustomerBundle\Entity\SettingsCivility;
use BackOffice\CustomerBundle\Entity\SettingsJuridique;
use BackOffice\CustomerBundle\Entity\SettingsQuality;
use BackOffice\CustomerBundle\Entity\SettingsResp;
use BackOffice\CustomerBundle\Entity\SettingsStateCode;
use BackOffice\MonitoringBundle\Manager\LogManager;
use Doctrine\Common\Cache\ArrayCache;
use Doctrine\ORM\EntityManager;
use Faker\Provider\DateTime;
use mageekguy\atoum\asserters\string;
use mageekguy\atoum\tests\units\asserters\dateInterval;
use mageekguy\atoum\tests\units\asserters\hash;
use Symfony\Component\Config\Definition\Exception\Exception;
use Symfony\Component\DependencyInjection\ContainerAware;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\Response;


class InformationsManager extends ContainerAware
{
    public $emm;
    public $lm;
    public $container;
    public function __construct( EntityManager $entityManager,LogManager $logManager){
        $this->emm=$entityManager;
        $this->lm = $logManager;
    }

    function setContainer(ContainerInterface $container = null)
    {
        parent::setContainer($container); // TODO: Change the autogenerated stub
    }

    public function setEntityManager($em)
    {
        $this->entityManager = $em;
    }

    public function executeMultipleSelectQuery($query)
    {
        $querySAB = $this->entityManager->getConnection()->prepare($query);
        $querySAB->execute();
        $results = $querySAB->fetchAll();
        return $results;
    }

    public function executeOneSelectQuery($query, $param = null)
    {
        $querySAB = $this->entityManager->getConnection()->prepare($query);
        $querySAB->execute();
        $results = $querySAB->fetch();
        return $results;
    }

    public function getCodes()
    {
        return $this->executeMultipleSelectQuery("SELECT BAS006004 FROM ZBAS0060 WHERE BAS006006 LIKE 'CRC%' ORDER BY BAS006004");
    }

    public function checkSiret($siret)
    {
        /**
         * @var Customer $customer
         */
        /**
         * @var InformationsManager $this
         */
        $customers = $this->entityManager->getRepository('BackOfficeCustomerBundle:Customer')->findAll();
        foreach ($customers as $customer) {
            if($customer->getSiren().$customer->getcodeNic() == $siret)
            {
                return $customer;
            }
        }
        return false;
    }

    public function getResponsable($dept)
    {
        /**
         * @var SettingsResp $setting
         */
        $result = null;
        $settings = $this->entityManager->getRepository('BackOfficeCustomerBundle:SettingsResp')->findAll();
        foreach($settings as $setting){
            if(in_array($dept,$setting->getDepartement())){
                return $setting;
            }
        }
        return $result;
    }


    public function getJuridique($nace)
    {
        /**
         * @var SettingsJuridique $setting
         */
        $result = null;
        $settings = $this->entityManager->getRepository('BackOfficeCustomerBundle:SettingsJuridique')->findAll();
        foreach($settings as $setting){
            if($setting->getNace()!=null)
            {
                if(in_array(substr($nace,0,5),$setting->getNace())){
                    return $setting;
                }
            }
        }
        return $result;
    }

    public function checkForme($forme){
        $civilities = $this->entityManager->getRepository('BackOfficeCustomerBundle:SettingsCivility')->findAll();
        /**
         * @var SettingsCivility $item
         */
        foreach ($civilities as $item) {
            foreach ($item->getJuridiqueForm() as $currentForme) {
                if($forme == $currentForme)
                {
                  return false;
                }
            }
        }
        return true;
    }

    public function getCivilityCode($juridiqueForm)
    {
        $civilities = $this->entityManager->getRepository('BackOfficeCustomerBundle:SettingsCivility')->findAll();
        /**
         * @var SettingsCivility $civility
         */
        foreach ($civilities as $civility) {
            foreach ($civility->getJuridiqueForm() as $item) {
                if($item == $juridiqueForm)
                {
                    return $civility;
                }
            }
        }
        return false;
    }

    public function getStateCode($juridiqueForm)
    {
        $states = $this->entityManager->getRepository('BackOfficeCustomerBundle:SettingsStateCode')->findAll();
        /**
         * @var SettingsStateCode $state
         */
        foreach ($states as $state) {
            if($state->getJuridiqueForme() != null)
            {
                foreach ($state->getJuridiqueForme() as $item) {
                    if($item == $juridiqueForm)
                    {
                        return $state;
                    }
            }
            }
        }
        return false;
    }

    public function getQuality($juridiqueForm)
    {
        $states = $this->entityManager->getRepository('BackOfficeCustomerBundle:SettingsQuality')->findAll();
        /**
         * @var SettingsQuality $state
         */
        foreach ($states as $state) {
            if($state->getFormes() != null)
            {
                foreach ($state->getFormes() as $item) {
                    if($item == $juridiqueForm)
                    {
                        return $state;
                    }
                }
            }
        }
        return false;
    }

    public function getCategory($forme)
    {
        $states = $this->entityManager->getRepository('BackOfficeCustomerBundle:SettingsCategorie')->findAll();
        /**
         * @var SettingsCategorie $state
         */
        foreach ($states as $state) {
            if($state->getFormes() != null)
            {
                foreach ($state->getFormes() as $item) {
                    if($item == $forme)
                    {
                        return $state;
                    }
                }
            }
        }
        return false;
    }

    public function checkFormeCategorie($forme)
    {
        $states = $this->entityManager->getRepository('BackOfficeCustomerBundle:SettingsCategorie')->findAll();
        /**
         * @var SettingsCategorie $state
         */
        foreach ($states as $state) {
            if($state->getFormes() != null)
            {
                foreach ($state->getFormes() as $item) {
                    if($item == $forme)
                    {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    public function checkFormeState($juridiqueForm)
    {
        $states = $this->entityManager->getRepository('BackOfficeCustomerBundle:SettingsStateCode')->findAll();
        /**
         * @var SettingsStateCode $state
         */
        foreach ($states as $state) {
            if($state->getJuridiqueForme() != null)
            {
                foreach ($state->getJuridiqueForme() as $item) {
                    if($item == $juridiqueForm)
                    {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    public function checkModificationCustomer($data,$customer)
    {

        $utf8 = array(
            '/[áàâãªä]/u' => 'a',
            '/[ÁÀÂÃÄ]/u' => 'A',
            '/[ÍÌÎÏ]/u' => 'I',
            '/[íìîï]/u' => 'i',
            '/[éèêë]/u' => 'e',
            '/[ÉÈÊË]/u' => 'E',
            '/[óòôõºö]/u' => 'o',
            '/[ÓÒÔÕÖ]/u' => 'O',
            '/[úùûü]/u' => 'u',
            '/[ÚÙÛÜ]/u' => 'U',
            '/ç/' => 'c',
            '/Ç/' => 'C',
            '/ñ/' => 'n',
            '/Ñ/' => 'N',
            '/–/' => '-', // conversion d'un tiret UTF-8 en un tiret simple
            '/[‘’‚‹›]/u' => ' ', // guillemet simple
            '/[“”«»„]/u' => ' ', // guillemet double
            '/ /' => ' ', // espace insécable (équiv. à 0x160)
            '/¿/' => '',
            "/'/"=> ' ',
        );
        /**
         * @var Customer $customer
         */
        $modified = false;
        if(!$customer->getsiren_mod())
        {
            if ($data[8] != '' && strlen(str_replace("-","",$data[8])) == 10)
            {
                if ($data[9] != '' && strlen($data[9]) == 4)
                {
                    if($customer->getSiren() == null)
                    {
                        $modified = true;
                        $this->lm->addInfo('Ajout siren client : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                        $customer->setSiren(substr($data[8],0,9));
                        $code = substr($data[8],9,1).substr($data[9],0,4);
                        if($customer->getcodeNic() == null)
                        {
                            $modified = true;
                            $this->lm->addInfo('Ajout code nic client : '.$data[0].' ancien code nic :'.$customer->getcodeNic().' nouveau : '.$code,"BackOffice > Intégration des clients externes","Modification");
                            $customer->setcodeNic($code);
                        }
                    }

                }
            }
        }
        if(!$customer->getcapital_mod())
        {
            if($data[28] != $customer->getcapital() && $data[28] != '')
            {
                $modified = true;
                $this->lm->addInfo('Modification capital client : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                $customer->setcapital($data[28]);
            }
        }
        if(!$customer->getadresse_mod())
        {
            if($data[20 != ''])
            {
                if($data[21] != '')
                {
                    if($data[22] != '')
                    {
                        $addr = '';
                        if(mb_detect_encoding($data[20]) == 'UTF-8')
                        {
                            $addr .= iconv('Windows-1252', 'UTF-8//TRANSLIT//IGNORE', $data[20]).' ';
                        }
                        else
                        {
                            $addr .= $data[20].' ';
                        }
                        if(mb_detect_encoding($data[21]) == 'UTF-8')
                        {
                            $addr .= iconv('Windows-1252', 'UTF-8//TRANSLIT//IGNORE', $data[21]).' ';
                        }
                        else
                        {
                            $addr .= $data[21].' ';
                        }
                        if(mb_detect_encoding($data[22]) == 'UTF-8')
                        {
                            $addr .= iconv('Windows-1252', 'UTF-8//TRANSLIT//IGNORE', $data[22]);
                        }
                        else
                        {
                            $addr .= $data[22];
                        }
                        if($customer->getadresse() != (preg_replace(array_keys($utf8), array_values($utf8),$addr)))
                        {
                            $modified = true;
                            $this->lm->addInfo('Modification adresse client : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                            $customer->setadresse(preg_replace(array_keys($utf8), array_values($utf8),$addr));
                        }
                    }else
                    {
                        $addr = '';
                        if(mb_detect_encoding($data[20]) == 'UTF-8')
                        {
                            $addr .= iconv('Windows-1252', 'UTF-8//TRANSLIT//IGNORE', $data[20]).' ';
                        }
                        else
                        {
                            $addr .= $data[20].' ';
                        }
                        if(mb_detect_encoding($data[21]) == 'UTF-8')
                        {
                            $addr .= iconv('Windows-1252', 'UTF-8//TRANSLIT//IGNORE', $data[21]);
                        }
                        else
                        {
                            $addr .= $data[21];
                        }
                        if($customer->getadresse() != (preg_replace(array_keys($utf8), array_values($utf8),$addr)))
                        {
                            $modified = true;
                            $this->lm->addInfo('Modification adresse client : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                            $customer->setadresse(preg_replace(array_keys($utf8), array_values($utf8),$addr));
                        }
                    }
                }
                else
                {
                    $addr = '';
                    if(mb_detect_encoding($data[20]) == 'UTF-8')
                    {
                        $addr .= iconv('Windows-1252', 'UTF-8//TRANSLIT//IGNORE', $data[20]);
                    }
                    else
                    {
                        $addr .= $data[20];
                    }
                    if($customer->getadresse() != preg_replace(array_keys($utf8), array_values($utf8),$addr))
                    {
                        $modified = true;
                        $this->lm->addInfo('Modification adresse client : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                        $customer->setadresse(preg_replace(array_keys($utf8), array_values($utf8),$addr));
                    }
                }
            }
        }
        if(!$customer->gettel_mod())
        {
            if($data[16] != $customer->gettel() && $data[16] != '')
            {
                $modified = true;
                $this->lm->addInfo('Modification telephone client : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                $customer->settel($data[16]);
            }
        }
        if(!$customer->getfax_mod())
        {
            if ($data[17] != '' && strlen(str_replace("-","",$data[17]))==10)
            {
                if($data[17] != $customer->getfax())
                {
                    $modified = true;
                    $this->lm->addInfo('Modification fax client : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                    $customer->setfax($data[17]);
                }
            }
        }
        if(!$customer->getemail_mod())
        {
            if(iconv('Windows-1252', 'UTF-8//TRANSLIT//IGNORE', $data[18]) != $customer->getemail() && $data[18] != '')
            {
                $modified = true;
                $this->lm->addInfo('Modification email client : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                $customer->setemail($data[18]);
            }
        }
        if(!$customer->getcP_mod())
        {
            if(trim($data[23]) != $customer->getcP() && $data[23] != '')
            {
                $modified = true;
                $this->lm->addInfo('Modification code postal client : '.$data[0].' nouveau cp : '.$data[23],"BackOffice > Intégration des clients externes","Modification");
                $customer->setcP($data[23]);
            }
        }
        if(!$customer->getville_mod())
        {
            if(iconv('Windows-1252', 'UTF-8//TRANSLIT//IGNORE', $data[24]) != $customer->getville() && $data[24] != '')
            {
                $modified = true;
                $this->lm->addInfo('Modification ville client : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                $customer->setville($data[24]);
            }
        }
        if(!$customer->getpays_mod())
        {
            if($data[25] != $customer->getpays() && $data[25] != '')
            {
                $modified = true;
                $this->lm->addInfo('Modification pays client : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                $customer->setpays($data[25]);
            }
        }
        if(!$customer->getcodeape_mod())
        {
            if ($data[5] != '' && substr($data[5],0,5) != $customer->getcodeApe())
            {
                $modified = true;
                $this->lm->addInfo('Modification code ape : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                $customer->setcodeApe(substr($data[5],0,5));
            }
        }
        if(!$customer->getetat_mod())
        {
            if($data[1] != '')
            {
                $code = $this->getStateCode($data[1]);
                if($code && $code != $customer->getcodeEtat())
                {
                    $customer->setcodeEtat($code);
                    $this->lm->addInfo('Modification code état : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                    $modified = true;
                }
            }
        }
        if(!$customer->getcivility_mod())
        {
            if($data[1] != '')
            {
                $code = $this->getCivilityCode($data[1]);
                if($code && $code != $customer->getcodeCivilite())
                {
                    $customer->setcodeCivilite($code);
                    $this->lm->addInfo('Modification code civlité : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                    $modified = true;
                }
            }
        }
        if(!$customer->getquality_mod())
        {
            if($data[1] != '')
            {
                $code = $this->getQuality($data[1]);
                if($code && $code != $customer->getqualiteClient())
                {
                    $customer->setqualiteClient($code);
                    $this->lm->addInfo('Modification code qualité : '.$data[0],"BackOffice > Intégration des clients externes","Modification");
                    $modified = true;
                }
            }
        }

        if($modified)
        {
            $customer->setstatut(1);

        }
        return $modified;
    }

    public function checkData($customer)
    {
        /**
         * @var Customer $customer
         */
        $sendable = true;
        $return = 'Champs Manquants ou champs invalide : ';
        if($customer->getdesignation()==null)
        {
            $return .= 'Désignation/ ';
            $sendable = false;
        }
        if($customer->getadresse()==null || $customer->getadresse() =='')
        {
            $return.='adresse/ ';
            $sendable = false;

        }
        if($customer->getcP()==null || strlen($customer->getcP())!=5)
        {
            $return.='code postal/ ';
            $sendable = false;

        }
        if($customer->getville()==null)
        {
            $return.='ville/ ';
            $sendable = false;

        }
        if($customer->getpays()==null)
        {
            $return.='pays/ ';
            $sendable = false;

        }
        if($customer->getdateCreation()==null)
        {
            $return.='date de mise en relation/ ';
            $sendable = false;

        }
        if($customer->getcodeEtat() == null)
        {
            $return.='code état/ ';
            $sendable = false;

        }
        if($customer->getcodeCivilite() == null)
        {
            $return.='code civilité/ ';
            $sendable = false;

        }
       /* elseif($customer->getcodeCivilite()->getCivilityCode() != '004')
        {
            if($customer->getdateNaissance() == null)
            {
                $sendable = false;
                $return.='date de naissance/';
            }
        }*/
        if($customer->getqualiteClient()==null)
        {
            $return.='qualité client/ ';
            $sendable = false;
        }

        if($sendable)
        {
            return null;
        }
        else
        {
            return $return;
        }

    }

    public function createCustomerFile(Customer $customer)
    {
        /**
         * @var SettingsJuridique $settingsJuridique
         */
        $old_customer = null;
        if($customer->getExist())
        {
            $old_customer = $this->checkIfCustomerExist($customer);
        }
        $settingsJuridique = $customer->getJuridique();
        if (!file_exists($this->container->getParameter('dirSortieFIDINF').date('ymd').'/')) {
            mkdir($this->container->getParameter('dirSortieFIDINF').date('ymd').'/');
        }
        $fp = fopen($this->container->getParameter('dirSortieFIDINF').date('ymd').'/ZXPROBQE.dat','a+');
        $cpt = 1;
        $sequence = $this->getEntete($cpt,$customer,$old_customer)."000001CLIPRO01".$this->addSpace(2).date('Ymd')."00000001".$this->addSpace(320)."\n";
        $cpt++;
        fputs($fp,$sequence);
        $sequence = $this->getEntete($cpt,$customer,$old_customer)."01".$customer->getcodeCivilite()->getCivilityCode().$customer->getcodeCivilite()->getCustomerCode().
            "0102".$customer->getcodeEtat()->getAbrege().$this->addSpace(4-strlen($customer->getcodeEtat()->getAbrege())).substr($customer->getdesignation(),0,12).
            $this->addSpace(12-strlen(substr($customer->getdesignation(),0,12))).$customer->getdesignation().$this->addSpace(160-strlen($customer->getdesignation())).$this->addBirthDate($customer).
            $this->addSpace(114)."3".$this->addSpace(40)."\n";
        $cpt++;
        fputs($fp,$sequence);
        $sequence = $this->getEntete($cpt,$customer,$old_customer)."02".$customer->getqualiteClient()->getCode()."F".$this->addSpace(2)."F".$this->addSpace(2).$this->addSpace(1).$this->addZeros(16).$this->getCodePays($customer).$this->addSpace(70).$this->addZeros(13).$this->addSpace(26).
           $this->getSiret($customer).$this->getCodeApe($customer).$this->addSpace(1).'0'.$this->addZeros(8).$this->addSpace(43).$this->getCapital($customer).$this->addSpace(3).$this->addZeros(24).
            $this->getCodeInsee($customer).$this->addZeros(8).$this->addSpace(50).$this->getJuridiqueFile($customer).$this->getAttribit($customer).$this->addSpace(30)."\n";
        $cpt++;
        fputs($fp,$sequence);
        $sequence = $this->getEntete($cpt,$customer,$old_customer)."03".$customer->getresponsable().$this->getCategorieClient($customer).$this->addSpace(16)."1".$this->addSpace(28).$this->addZeros(8).$this->addSpace(3).$this->addZeros(11).
            $this->addSpace(36).$this->addCotesactivite($customer).$this->addCoteCredit($customer).$this->addZeros(28).$this->getChiffre($customer).$this->addZeros(18).$this->addSpace(10).$this->addZeros(8).$this->addSpace(6)."CLI".$this->addSpace(9).$this->addZeros(8).$this->addSpace(484)."\n";
        $cpt++;
        fputs($fp,$sequence);
        $sequence = $this->getEntete($cpt,$customer,$old_customer)."04".$this->addSpace(2).$this->addZeros(16).substr($customer->getdesignation(),0,38).$this->addSpace(38-strlen(substr($customer->getdesignation(),0,38))).$this->addSpace(38).
            $this->writeAdress($customer).$customer->getcP().$this->addSpace(12-strlen($customer->getcP())).$customer->getville().$this->addSpace(32-strlen($customer->getville())).
            $this->getCodePays($customer).$customer->getpays().$this->addSpace(25-strlen($customer->getpays())).$this->getCodeBanque($customer).$this->addSpace(368)."\n";
        $cpt++;
        fputs($fp,$sequence);
        $sequence = $this->getEntete($cpt,$customer,$old_customer)."06"."GE".$customer->getidCustomer().$this->addSpace(15-strlen($customer->getidCustomer())).$this->addSpace(679)."\n";
        $cpt++;
        fputs($fp,$sequence);
        if($customer->gettel() != null)
        {
            $prefix = substr($customer->gettel(),0,2);
            if($prefix == '06' || $prefix == '07' )
            {
                $sequence = $this->getEntete($cpt,$customer,$old_customer)."10".'MOBILE'.$customer->gettel().$this->addSpace(50-strlen($customer->gettel()))."1".$this->addSpace(639)."\n";
            }
            else
            {
                $sequence = $this->getEntete($cpt,$customer,$old_customer)."10".'DOMIC.'.$customer->gettel().$this->addSpace(50-strlen($customer->gettel()))."1".$this->addSpace(639)."\n";
            }
            $cpt++;
            fputs($fp,$sequence);
        }
        if($customer->getemail() != null)
        {
            $sequence = $this->getEntete($cpt,$customer,$old_customer)."10".'EMAILP'.$customer->getemail().$this->addSpace(50-strlen($customer->getemail()))."1".$this->addSpace(639)."\n";
            $cpt++;
            fputs($fp,$sequence);
        }
        if($customer->getfax() != null)
        {
            $sequence = $this->getEntete($cpt,$customer,$old_customer)."10".'FAX'.$this->addSpace(3).$customer->getfax().$this->addSpace(50-strlen($customer->getfax()))."1".$this->addSpace(639)."\n";
            $cpt++;
            fputs($fp,$sequence);
        }
        if(!$customer->getExist())
        {
            $sequence = $this->getEntete($cpt,$customer,$old_customer)."20".date_format($customer->getdateCreation(),'Ymd')."FIDINF".$this->addSpace(682)."\n";
            $cpt++;
            fputs($fp,$sequence);
        }
        $sequence = $this->getEntete($cpt,$customer,$old_customer)."99"."000001".$this->addSpace(690)."\n";
        fputs($fp,$sequence);
        fclose($fp);
    }

    public function getCodeInsee(Customer $customer)
    {
        if($customer->getcodePays() == null)
        {
            return '00   ';
        }
        else
        {
            return $customer->getcodePays().$this->addSpace(5-strlen($customer->getcodePays()));
        }
    }

    public function writeAdress(Customer $customer)
    {
        if(strlen($customer->getadresse()) > 38 )
        {
            $adress1 = substr($customer->getadresse(),38,38);
            $adress2 = substr($customer->getadresse(),0,38);
            $adress = $adress1.$this->addSpace(38-strlen($adress1)).$adress2;
            if(strlen($customer->getadresse()>76))
            {
                $adress .= substr($customer->getadresse(),76);
            }
        }
        else
        {
            $adress = $this->addSpace(38).$customer->getadresse();
        }
        return $adress.$this->addSpace(152-strlen($adress));
    }

    public function getJuridiqueFile(Customer $customer)
    {
        if($customer->getJuridique() == null)
        {
            return '9999';
        }
        else
        {
            return $customer->getJuridique()->getCode();
        }
    }

    public function getSiret(Customer $customer)
    {
        if($customer->getSiren() == null)
        {
            return 'NEANT    00000';
        }
        else
        {
            if($customer->getcodeNic()==null)
            {
                return $customer->getSiren().'00000';
            }
            else
            {
                return $customer->getSiren().$customer->getcodeNic();
            }
        }
    }

    public function getCodeApe(Customer $customer)
    {
        if($customer->getcodeApe() == null)
        {
            return '0000Z';
        }
        else
        {
            return $customer->getcodeApe();
        }
    }

    public function getCodeBanque(Customer $customer)
    {
        if($customer->getcodeCivilite()->getCivilityCode() == '004')
        {
            return $this->addZeros(10);
        }
        else
        {
            return $this->addZeros(10);
        }
    }

    public function getCategorieClient(Customer $customer)
    {
        if($customer->getcategorieClient() != null)
        {
            return $customer->getcategorieClient()->getCode();
        }
        else
        {
            return 'PRO';
        }
    }

    public function getEntete($number,Customer $customer,$old_customer)
    {
        if($old_customer)
        {
            return $entete = "I".$customer->getidCustomer().$this->addSpace(20-strlen($customer->getidCustomer())).$this->addZeros(7-strlen($number)).$number."01".date('Ymdhis').$this->addZeros(2)."SABSAB139".$this->addSpace(4).
                "SABFIRME".$this->addSpace(2)."10000000000010102RCRC".$this->addSpace(96)."CLIMAJ".$this->addSpace(104)."007".$this->addSpace(47).$old_customer['CLIENACLI'].$this->addSpace(15-strlen($old_customer['CLIENACLI']));
        }
        else
        {
            return $entete = "I".$customer->getidCustomer().$this->addSpace(20-strlen($customer->getidCustomer())).$this->addZeros(7-strlen($number)).$number."01".date('Ymdhis').$this->addZeros(2)."SABSAB139".$this->addSpace(4).
                "SABFIRME".$this->addSpace(2)."10000000000010102RCRC".$this->addSpace(96)."CLIMAJ".$this->addSpace(104)."007".$this->addSpace(62);
        }
    }

    public function addSpace($nbr)
    {
        $result = '';
        for($i=0;$i<$nbr;$i++)
        {
            $result .= " ";
        }
        return $result;
    }

    public function addZeros($nbr)
    {
        $result = '';
        for($i=0;$i<$nbr;$i++)
        {
            $result .= "0";
        }
        return $result;
    }

    public function addBirthDate(Customer $customer)
    {
        if($customer->getcodeCivilite()->getCivilityCode() == '004')
        {
            return $this->addZeros(8);
        }
        else
        {
            if($customer->getdateNaissance() == null)
            {
                return '18000101';
            }
            else
            {
                return date_format($customer->getdateNaissance(),'Ymd');
            }
        }
    }

    public function addCotesactivite(Customer $customer)
    {
        if($customer->getcoteActivite()==null)
        {
            return 'X';
        }
        else
        {
            return $customer->getcoteActivite();
        }
    }

    public function addCoteCredit(Customer $customer)
    {
        if($customer->getcotecredit() == null)
        {
            return 'NR ';
        }
        else
        {
            return $customer->getcotecredit().$this->addSpace(3-strlen($customer->getcotecredit()));
        }
    }

    public function getCodePays(Customer $customer)
    {
            if($customer->getcodeCivilite()->getCivilityCode() == '004')
            {
                return $this->addSpace(3);
            }
            else
            {
                return 'F  ';
            }
    }

    public function getCapital(Customer $customer)
    {
        if($customer->getcapital()==null)
        {
            return $this->addZeros(15);
        }
        else
        {
            return $this->addZeros(strlen(15-(string)$customer->getcapital())).$customer->getcapital();
        }
    }

    public function getAttribit(Customer $customer)
    {
        if($customer->getcodeCivilite()->getCivilityCode() == '004')
        {
            return "2";
        }
        else
        {
            return "3";
        }
    }

    public function getChiffre(Customer $customer)
    {
        if($customer->getchiffreAffaire() == null)
        {
            return $this->addZeros(9);
        }
        else
        {
            return $customer->getchiffreAffaire();
        }
    }

    public function checkNace($nace)
    {
       $states = $this->entityManager->getRepository('BackOfficeCustomerBundle:SettingsJuridique')->findAll();
        /**
         * @var SettingsJuridique $state
         */
        foreach ($states as $state) {
            if($state->getNace() != null)
            {
                foreach ($state->getNace() as $item) {
                    if($item == $nace)
                    {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    public function checkFormeQuality($forme)
    {
        $qualities = $this->entityManager->getRepository('BackOfficeCustomerBundle:SettingsQuality')->findAll();
        /**
         * @var SettingsQuality $quality
         */
        foreach ($qualities as $quality) {
            if($quality->getFormes() != null)
            {
                foreach ($quality->getFormes() as $item) {
                    if($item == $forme)
                    {
                        return false;
                    }
                }
            }
        }
        return true;
    }


    public function getListJuridiqueForm()
    {
        return array(
            "AA-Association agréée",
        "Agence Fiducial",
"ASSA-Association (autre)",
"ASSD-Association déclarée",
"ASSSP-Association sportive",
"ASSUP-Association utilité publique",
"AUTRE-Autre",
"CGA-Centre de gestion agréé",
"CGAH-Centre gestion agréé, habilité",
"COOPA-Coopérative agricole",
"CUMA-Coopérative utilisat. matériel",
"DGR Fiducial",
"DIV-Divers",
"DR Fiducial",
"EARL-Exploit. agricole à resp. lim.",
"EURL-Entrep. Unipers. à resp. lim.",
"FOND-Fondation",
"GAEC-Group agricole exploit. commun",
"GEIE-Group. européen intérêt éco.",
"GF-Groupement forestier",
"GFA-Groupement foncier agricole",
"GIE-Groupement d'intérêt économique",
"GREMP-Groupement d'employeurs",
"IND-Indivision",
"Indéterminé",
"M-Individuel",
"MLLE-Individuel",
"MME-Individuel",
"SA-Société anonyme",
"SAOS-Société anonyme objet sportif",
"SARL-Société à responsab. limitées",
"SAS-Société par actions simplifiée",
"SCA-Société civile d'attribution",
"SCCV-Société civile construc. vente",
"SCEA-Société civile exploit. Agric.",
"SCFIN-Société civile gestion finan.",
"SCI-Société civile immob. location",
"SCIV-Société civile",
"SCM-Société civile de moyens",
"SCOP-Société coopér. ouvrière prod.",
"SCP-Société civile professionnelle",
"SCPA-Société en commandite par act.",
"SCPI-Société civile placement immo.",
"SCPORT-Société civile gest. Portef.",
"SCPTON-Sté civile profess. TON",
"SCS-Société en commandite simple",
"SDF-Société de fait",
"SELAFA-Sté expres. libre forme ano.",
"SELARL-Sté expres. libre resp. lim.",
"SELCA-Sté expres lib commandite act",
"SELURL-Sté à exer. libéral unipers.",
"SEM-Société d'économie mixte",
"SEP-Société en participation",
"SICA-Sté intérêt collectif agricole",
"SNC-Société en nom collectif",
"SPRL-Société privée à resp limitées",
"SYND-Syndicat");

    }

    public function checkIfCustomerExist(Customer $customer)
    {
            if($customer->getSiren() == null)
            {
                return $this->executeOneSelectQuery("SELECT * FROM ZCLIENA0 WHERE CLIENARA1 ='".substr($customer->getdesignation(),0,32)."'");
            }
            else
            {
                /**
                 * @var Customer $customer_doublon
                 */
                $customer_doublon = $this->executeOneSelectQuery("SELECT * FROM Customer where designation ='".$customer->getdesignation()."' and idcustomer <>'".$customer->getidCustomer()."'");
                if($customer_doublon)
                {
                    return $this->executeOneSelectQuery("SELECT * FROM ZCLIENA0 WHERE CLIENARA1 ='".substr($customer->getdesignation(),0,32)."' and (CLIENASRN = '".$customer->getSiren()."' and CLIENASRT ='".$customer->getcodeNic()."')");
                }
                else
                {
                    return $this->executeOneSelectQuery("SELECT * FROM ZCLIENA0 WHERE CLIENARA1 ='".substr($customer->getdesignation(),0,32)."' or (CLIENASRN = '".$customer->getSiren()."' and CLIENASRT ='".$customer->getcodeNic()."')");
                }
            }
    }

    public function checkSabResultSend(Customer $customer)
    {
        $results =  $this->executeMultipleSelectQuery("SELECT * FROM ZMNWFLB0 WHERE MNWFLBREF ='".$customer->getidCustomer()."'");
        try{
            $this->entityManager->getConnection()->beginTransaction();
            $this->entityManager->getConnection()->executeQuery("DELETE FROM ZMNWFLB0 WHERE MNWFLBREF ='".$customer->getidCustomer()."'");
            $this->entityManager->getConnection()->executeQuery("DELETE FROM ZMNWFLA0 WHERE MNWFLAREF ='".$customer->getidCustomer()."'");
            $this->entityManager->getConnection()->commit();
        }catch(Exception $e)
        {
            $this->entityManager->getConnection()->rollback();
            throw $e;
        }
        return $results;
    }

    public function createProductSAB(Customer $customer)
    {
        $customerSAB = $this->checkIfCustomerExist($customer);
        if($customerSAB)
        {
            $product = $this->executeOneSelectQuery("SELECT * FROM ZBAGABO0 WHERE BAGABOCLI = '".$customerSAB['CLIENACLI']."' and BAGABOPRO ='011'");
            if(!$product)
            {
                $zbagabo0 = array(
                    'BAGABOETA' => 1,
                    'BAGABOAGE' => 102,
                    'BAGABOSER' => 'RC',
                    'BAGABOSSE' => 'RC',
                    'BAGABONUM' => $this->getMAxNbrContract(),
                    'BAGABOCLI' => $customerSAB['CLIENACLI'],
                    'BAGABOCOM' => '12101000099',
                    'BAGABOPRO' => '011',
                    'BAGABOADH' => '1'.$customer->getdateCreation()->format('ymd'),
                    'BAGABOFIN' => '00000000',
                    'BAGABOREN' => 0,
                    'BAGABOCET' => 2,
                    'BAGABOCOF' => '12101000099',
                    'BAGABOUT1' => 0,
                    'BAGABOUT2' => 0,
                    'BAGABORES' => 0,
                    'BAGABOMOR' => ' ',
                    'BAGABOCRE' => '1'.$customer->getdateCreation()->format('ymd'),
                    'BAGABOVAL' => '1'.$customer->getdateCreation()->format('ymd')
                );

                try{
                    $this->entityManager->getConnection()->beginTransaction();
                    $this->entityManager->getConnection()->insert("ZBAGABO0", $zbagabo0);
                    $this->entityManager->getConnection()->commit();
                }catch(Exception $e)
                {
                    $this->entityManager->getConnection()->rollback();
                    throw $e;
                }
            }
        }
        else
        {
            $this->lm->addInfo('Client introuvable dans le référentiel SAB '.$customer->getdesignation(),"BackOffice > Intégration des clients externes","Modification");

        }

    }

    public function getMAxNbrContract()
    {
        $max =  $this->executeOneSelectQuery("SELECT max(BAGABONUM) FROM ZBAGABO0");
        return (int)$max['MAX(BAGABONUM)']+1;
    }

}