<?php

namespace BackOffice\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProfilRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProfilRepository extends EntityRepository
{
    public function findAll()
    {
        return $this->findBy(array(), array('username' => 'ASC'));
    }
    
    public function search($datas, $sort = null)
    {
        $query = $this
                    ->createQueryBuilder('p')
                    ->where('p.id IS NOT NULL');
        
        if (isset($datas['username']) && $datas['username'] != "") {
            $query
                ->andWhere('p.username LIKE :u')
                ->setParameter('u', "%".$datas['username']."%");
        }
        if (isset($datas['name']) && $datas['name']) {
            $query
                ->andWhere('p.nom LIKE :n')
                ->setParameter('n', "%".$datas['name']."%");
        }
        if (isset($datas['firstName']) && $datas['firstName']) {
            $query
                ->andWhere('p.prenom LIKE :fn')
                ->setParameter('fn', "%".$datas['firstName']."%");
        }
        if (isset($datas['codeUser']) && $datas['codeUser']) {
            $query
                ->andWhere('p.codeUser LIKE :cu')
                ->setParameter('cu', "%".$datas['codeUser']."%");
        }
        if (isset($datas['email']) && $datas['email']) {
            $query
                ->andWhere('p.email LIKE :e')
                ->setParameter('e', "%".$datas['email']."%");
        }
        if (isset($datas['role']) && $datas['role']) {
            if ($datas['role'] == "ROLE_USER") {
                $query
                    ->andWhere('p.roles LIKE :r')
                    ->setParameter('r', "a:0:{}");
            } else {
                $query
                    ->andWhere('p.roles LIKE :r')
                    ->setParameter('r', "%".$datas['role']."%");
            }
        }
        if (isset($datas['notification']) && $datas['notification']) {
            $query
                ->andWhere('p.notifications LIKE :n')
                ->setParameter('n', "%".$datas['notification']."%");
        }
        
        if ($sort) {
            $arraySort = explode('-', $sort);
            $query->orderBy('p.'.$arraySort[0], $arraySort[1]);
        } else {
            $query->orderBy('p.username', 'ASC');
        }

        return $query->getQuery()->getResult();
    }
    
    public function countSameUsername($username)
    {
        $query = $this
            ->createQueryBuilder('p')
            ->select('COUNT(p)')
            ->where('p.username LIKE :un')
            ->setParameter('un', $username."%");
        
        return $query->getQuery()->getSingleScalarResult();
    }
}
