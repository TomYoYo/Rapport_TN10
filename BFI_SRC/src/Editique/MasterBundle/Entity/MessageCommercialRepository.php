<?php

namespace Editique\MasterBundle\Entity;

use Doctrine\ORM\EntityRepository;
use BackOffice\ParserBundle\Manager\ParserManager;

/**
 * MessageCommercialRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageCommercialRepository extends EntityRepository
{
    public function findAll()
    {
        return $this->findBy(array(), array('dateFin' => 'ASC', 'dateDebut' => 'ASC'));
    }
    
    public function search($datas)
    {
        $query = $this
            ->createQueryBuilder('m')
            ->where('m.id IS NOT NULL');
        
        if (isset($datas['content']) && $datas['content'] != "") {
            $query
                ->andWhere('m.message LIKE :c')
                ->setParameter('c', "%".$datas['content']."%");
        }
        if (isset($datas['statut']) && $datas['statut'] != "") {
            switch ($datas['statut']) {
                case 'active':
                    $query
                        ->andWhere($query->expr()->lte('m.dateDebut', ':dateDebut'))
                        ->setParameter(
                            'dateDebut',
                            ParserManager::transformDate(date('d/m/Y')),
                            \Doctrine\DBAL\Types\Type::DATETIME
                        )
                        ->andWhere($query->expr()->gte('m.dateFin', ':dateFin'))
                        ->setParameter(
                            'dateFin',
                            ParserManager::transformDate(date('d/m/Y')),
                            \Doctrine\DBAL\Types\Type::DATETIME
                        );
                    break;
                case 'programmed':
                    $query
                        ->andWhere($query->expr()->gt('m.dateDebut', ':dateDebut'))
                        ->setParameter(
                            'dateDebut',
                            ParserManager::transformDate(date('d/m/Y')),
                            \Doctrine\DBAL\Types\Type::DATETIME
                        );
                    break;
                case 'passed':
                    $query
                        ->andWhere($query->expr()->lt('m.dateFin', ':dateFin'))
                        ->setParameter(
                            'dateFin',
                            ParserManager::transformDate(date('d/m/Y')),
                            \Doctrine\DBAL\Types\Type::DATETIME
                        );
                    break;
            }
        }
        
        $query->orderBy('m.dateFin', 'ASC');
        $query->orderBy('m.dateDebut', 'ASC');
        
        return $query->getQuery()->getResult();
    }
    
    public function findActiveBroken($limit = 10)
    {
        $return = array();
        $query = $this
            ->createQueryBuilder('m')
            ->select('m.message')
            ->where('m.id IS NOT NULL');
        
        $query
            ->andWhere($query->expr()->lte('m.dateDebut', ':dateDebut'))
            ->setParameter(
                'dateDebut',
                ParserManager::transformDate(date('d/m/Y')),
                \Doctrine\DBAL\Types\Type::DATETIME
            )
            ->andWhere($query->expr()->gte('m.dateFin', ':dateFin'))
            ->setParameter(
                'dateFin',
                ParserManager::transformDate(date('d/m/Y')),
                \Doctrine\DBAL\Types\Type::DATETIME
            )
            ->orderBy('m.dateFin')
            ->orderBy('m.dateDebut', 'DESC')
            ->setMaxResults($limit);
        
        $results = $query->getQuery()->getResult();
        
        $i = 0;
        foreach ($results as $result) {
            $return[$i][0] = substr($result['message'], 0, 55);
            $return[$i][1] = substr($result['message'], 55, 55);
            
            $i++;
        }
        
        return $return;
    }
}
