<?php

namespace Fiscalite\ODBundle\Entity;

use Doctrine\ORM\EntityRepository;
use BackOffice\ParserBundle\Manager\ParserManager;

/**
 * ActionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActionRepository extends EntityRepository
{
    public function findAll()
    {
        return $this->findBy(array(), array('dateAction' => 'DESC'));
    }

    public function search($datas, $sort = null)
    {
        $query = $this
                    ->createQueryBuilder('a')
                    ->where('a.idAction IS NOT NULL');

        if (isset($datas['action']) && $datas['action'] != "") {
            $query
                ->andWhere('a.libelleAction = :la')
                ->setParameter('la', $datas['action']);
        }
        if (isset($datas['dateDu']) && $datas['dateDu']) {
            $query
                ->andWhere($query->expr()->gte('a.dateAction', ':dateDu'))
                ->setParameter(
                    'dateDu',
                    ParserManager::transformDate($datas['dateDu']),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }
        if (isset($datas['dateAu']) && $datas['dateAu']) {
            $query
                ->andWhere($query->expr()->lte('a.dateAction', ':dateAu'))
                ->setParameter(
                    'dateAu',
                    ParserManager::transformDate($datas['dateAu'], false),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }
        if (isset($datas['numPiece']) && $datas['numPiece']) {
            $query
                ->andWhere('a.operation = :np')
                ->setParameter('np', $datas['numPiece']);
        }
        if (isset($datas['actionneur']) && $datas['actionneur']) {
            $query
                ->andWhere('a.login = :l')
                ->setParameter('l', $datas['actionneur']);
        }

        if ($sort) {
            $arraySort = explode('-', $sort);
            $query->orderBy('a.'.$arraySort[0], $arraySort[1]);
        } else {
            $query->orderBy('a.dateAction', 'DESC');
        }

        return $query->getQuery()->getResult();
    }

    public function getActionsPourAudit()
    {
        $date = date('d/m/Y');
        $query = $this
                    ->createQueryBuilder('a')
                    ->where('a.idAction IS NOT NULL');

        $query
            ->andWhere($query->expr()->gte('a.dateAction', ':dateDu'))
            ->setParameter(
                'dateDu',
                ParserManager::transformDate($date),
                \Doctrine\DBAL\Types\Type::DATETIME
            )
            ->andWhere($query->expr()->lte('a.dateAction', ':dateAu'))
            ->setParameter(
                'dateAu',
                ParserManager::transformDate($date, false),
                \Doctrine\DBAL\Types\Type::DATETIME
            );


        $query->orderBy('a.idAction', 'ASC');

        return $query->getQuery()->getResult();
    }

    private function transformDate($string)
    {
        $day = substr($string, 0, 2);
        $month = substr($string, 3, 2);
        $year = substr($string, 6);

        $d = new \DateTime();
        $d->setDate($year, $month, $day);

        return $d;
    }
}
