<?php

namespace Fiscalite\ODBundle\Entity;

use Doctrine\ORM\EntityRepository;
use BackOffice\ParserBundle\Manager\ParserManager;

/**
 * OperationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OperationRepository extends EntityRepository
{
    public function findAll()
    {
        return $this->findBy(array(), array('dateSai' => 'DESC'));
    }

    /**
     * Vérifie si des jn ont ete saisie pour voir si les jc sont autorises
     * @return bool true si aucune jn n'a été saisie aujourd'hui
     */
    public function jcAutorise()
    {
        $date = date('d/m/Y');

        // on vérifie si des jn ont ete saisie pour voir si les jc sont autorises
        $query = $this->createQueryBuilder('o');

        $query
            ->where('o.isDeleted = FALSE')
            ->andWhere('o.isComplementaryDay = :cd')
            ->setParameter('cd', false)
            ->andWhere($query->expr()->gte('o.dateSai', ':dateDu'))
            ->setParameter(
                'dateDu',
                ParserManager::transformDate($date),
                \Doctrine\DBAL\Types\Type::DATETIME
            )
            ->andWhere($query->expr()->lte('o.dateSai', ':dateAu'))
            ->setParameter(
                'dateAu',
                ParserManager::transformDate($date, false),
                \Doctrine\DBAL\Types\Type::DATETIME
            )
        ;
        
        return empty($query->getQuery()->getResult());
    }

    public function search($datas, $sort = null)
    {
        $query = $this
            ->createQueryBuilder('o')
            ->where('o.numPiece IS NOT NULL');

        if (isset($datas['isDeleted']) && $datas['isDeleted']) {
            if ($datas['isDeleted'] === 'oui') {
                $query->andWhere('o.isDeleted = TRUE');
            } elseif ($datas['isDeleted'] === 'non') {
                $query->andWhere('o.isDeleted = FALSE');
            }
        }

        if (isset($datas['dateSaiDu']) && $datas['dateSaiDu']) {
            $query
                ->andWhere($query->expr()->gte('o.dateSai', ':dateSaiDu'))
                ->setParameter(
                    'dateSaiDu',
                    ParserManager::transformDate($datas['dateSaiDu']),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }
        if (isset($datas['dateSaiAu']) && $datas['dateSaiAu']) {
            $query
                ->andWhere($query->expr()->lte('o.dateSai', ':dateSaiAu'))
                ->setParameter(
                    'dateSaiAu',
                    ParserManager::transformDate($datas['dateSaiAu'], false),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }

        if (isset($datas['dateCptDu']) && $datas['dateCptDu']) {
            $query
                ->andWhere($query->expr()->gte('o.dateCpt', ':dateCptDu'))
                ->setParameter(
                    'dateCptDu',
                    ParserManager::transformDate($datas['dateCptDu']),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }
        if (isset($datas['dateCptAu']) && $datas['dateCptAu']) {
            $query
                ->andWhere($query->expr()->lte('o.dateCpt', ':dateCptAu'))
                ->setParameter(
                    'dateCptAu',
                    ParserManager::transformDate($datas['dateCptAu'], false),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }

        if (isset($datas['id']) && $datas['id']) {
            $query
                ->andWhere('o.numPiece LIKE :np')
                ->setParameter('np', "%" . $datas['id'] . "%");
        }
        if (isset($datas['numPiece']) && $datas['numPiece']) {
            $query
                ->andWhere('o.numPieceTech LIKE :np')
                ->setParameter('np', "%" . $datas['numPiece'] . "%");
        }
        if (isset($datas['numPieceTech']) && $datas['numPieceTech']) {
            $query
                ->andWhere('o.numPieceTech LIKE :np')
                ->setParameter('np', "%" . $datas['numPieceTech'] . "%");
        }
        if (isset($datas['codeOpe']) && $datas['codeOpe']) {
            $query
                ->andWhere('o.codeOpe = :co')
                ->setParameter('co', $datas['codeOpe']);
        }
        if (isset($datas['codeEve']) && $datas['codeEve']) {
            $query->andWhere('o.codeEve = :ce')
                ->setParameter('ce', $datas['codeEve']);
        }
        if (isset($datas['tiers']) && $datas['tiers']) {
            $query
                ->andWhere('o.tiers LIKE :t')
                ->setParameter('t', "%" . $datas['tiers'] . "%");
        }
        if (isset($datas['saisisseur']) && $datas['saisisseur']) {
            $query
                ->leftJoin('o.profil', 'p')
                ->andWhere('p.login LIKE :s')
                ->setParameter('s', "%" . $datas['saisisseur'] . "%");
        }
        if (isset($datas['statut']) && $datas['statut']) {
            $query
                ->andWhere('o.statut = :s')
                ->setParameter('s', $datas['statut']);
        }
        if (isset($datas['isComplementaryDay'])
            && ($datas['isComplementaryDay'] == '0' || $datas['isComplementaryDay'] == '1')) {
            $query
                ->andWhere('o.isComplementaryDay = :cd')
                ->setParameter('cd', $datas['isComplementaryDay']);
        }

        if ($sort) {
            $arraySort = explode('-', $sort);
            $query->orderBy('o.'.$arraySort[0], $arraySort[1]);
        } else {
            $query->orderBy('o.numPiece', 'DESC');
        }

        return $query->getQuery()->getResult();
    }
    
    /*
     * dev jc module rapprochement
     */
    public function searchRapprochement($datas)
    {
                 
        $query = $this->createQueryBuilder('o');
         
        $query->select('m.compte, SUM(m.montant)')
        ->innerJoin('o.mouvements', 'm', 'WITH', 'm.numPiece = o.numPiece');

        if (isset($datas['isDeleted']) && $datas['isDeleted']) {
            if ($datas['isDeleted'] === 'oui') {
                $query->andWhere('o.isDeleted = TRUE');
            } elseif ($datas['isDeleted'] === 'non') {
                $query->andWhere('o.isDeleted = FALSE');
            }
        }

        if (isset($datas['dateCptDu']) && $datas['dateCptDu']) {
            $query
                ->andWhere($query->expr()->gte('o.dateCpt', ':dateCptDu'))
                ->setParameter(
                    'dateCptDu',
                    ParserManager::transformDate($datas['dateCptDu']),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }
        if (isset($datas['dateCptAu']) && $datas['dateCptAu']) {
            $query
                ->andWhere($query->expr()->lte('o.dateCpt', ':dateCptAu'))
                ->setParameter(
                    'dateCptAu',
                    ParserManager::transformDate($datas['dateCptAu'], false),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }

        if ($datas['codeOpe'] == 'Tous') {
            $query
            ->andWhere(
                "(o.codeOpe = '*FB' OR o.codeOpe = '*TV' OR o.codeOpe = '*AC' OR o.codeOpe = '*FD'"
                . "OR o.codeOpe = '*BQ' OR o.codeOpe = '*OD' OR o.codeOpe = '*PA' OR o.codeOpe = '*VE')"
            );
                
        } else {
            $query
                ->andWhere('o.codeOpe = :co')
                ->setParameter('co', $datas['codeOpe']);
        }
      
        
        if (isset($datas['codeEve']) && $datas['codeEve']) {
            $query->andWhere('o.codeEve = :ce')
                ->setParameter('ce', $datas['codeEve']);
        }
   
        if (isset($datas['statut']) && $datas['statut']) {
            $query
                ->andWhere('o.statut = :s')
                ->setParameter('s', $datas['statut']);
        }
     
      
        $query->GroupBy('m.compte');

        return $query->getQuery()->getResult();

    }
    
    
    
    public function searchDetail($datas)
    {
                 
        $query = $this->createQueryBuilder('o');

        $query->select('m.compte, m.montant, o.dateCpt, o.numPieceTech, m.numMvmt, o.numPiece, o.codeOpe ')
        ->innerJoin('o.mouvements', 'm', 'WITH', 'm.numPiece = o.numPiece')
        ->where('trim(m.compte) = :c')
        ->setParameter('c', $datas['compte']);
        if (isset($datas['isDeleted']) && $datas['isDeleted']) {
            if ($datas['isDeleted'] === 'oui') {
                $query->andWhere('o.isDeleted = TRUE');
            } elseif ($datas['isDeleted'] === 'non') {
                $query->andWhere('o.isDeleted = FALSE');
            }
        }

        if (isset($datas['dateCptDu']) && $datas['dateCptDu']) {
            $query
                ->andWhere($query->expr()->gte('o.dateCpt', ':dateCptDu'))
                ->setParameter(
                    'dateCptDu',
                    ParserManager::transformDate($datas['dateCptDu']),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }
        if (isset($datas['dateCptAu']) && $datas['dateCptAu']) {
            $query
                ->andWhere($query->expr()->lte('o.dateCpt', ':dateCptAu'))
                ->setParameter(
                    'dateCptAu',
                    ParserManager::transformDate($datas['dateCptAu'], false),
                    \Doctrine\DBAL\Types\Type::DATETIME
                );
        }

        if ($datas['codeOpe'] == 'Tous') {
            $query
            ->andWhere(
                "(o.codeOpe = '*FB' OR o.codeOpe = '*TV' OR o.codeOpe = '*AC' OR o.codeOpe = '*FD'"
                . "OR o.codeOpe = '*BQ' OR o.codeOpe = '*OD' OR o.codeOpe = '*PA' OR o.codeOpe = '*VE')"
            );
                
        } else {
            $query
                ->andWhere('o.codeOpe = :co')
                ->setParameter('co', $datas['codeOpe']);
        }
      
        
        if (isset($datas['codeEve']) && $datas['codeEve']) {
            $query->andWhere('o.codeEve = :ce')
                ->setParameter('ce', $datas['codeEve']);
        }
   
        if (isset($datas['statut']) && $datas['statut']) {
            $query
                ->andWhere('o.statut = :s')
                ->setParameter('s', $datas['statut']);
        }

            return $query->getQuery()->getResult();
    }
}
